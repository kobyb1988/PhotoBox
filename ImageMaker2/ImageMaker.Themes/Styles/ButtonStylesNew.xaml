<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:ImageMaker.Themes.Converters"
                    xmlns:customControls="clr-namespace:ImageMaker.Themes.CustomControls">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:TextToUpperConverter x:Key="TextToUpperConverter" />
    <converters:AlignToCornerRadiusConverter x:Key="AlignToCornerRadiusConverter" />
    <converters:InvertedBooleanToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter" />
    
    
   
    <Style TargetType="{x:Type customControls:BlueButton}" x:Key="BaseBtnStyle">
        <Style.Resources>
            <ControlTemplate TargetType="{x:Type customControls:BlueButton}" x:Key="LeftHanded">
                <Border 
                        Padding="{TemplateBinding Padding}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                    <Border.CornerRadius>
                        <MultiBinding Converter="{StaticResource AlignToCornerRadiusConverter}">
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerAlign" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerRadius" />
                        </MultiBinding>
                    </Border.CornerRadius>
                    <Border
                            x:Name="innerBorder"
                            Background="{TemplateBinding Background}">
                        <Border.CornerRadius>
                            <MultiBinding Converter="{StaticResource AlignToCornerRadiusConverter}">
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerAlign" />
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="InnerCornerRadius" />
                            </MultiBinding>
                        </Border.CornerRadius>
                        <Grid>
                            <Grid 
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowBackButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding ElementName=innerBorder, Path=ActualHeight}"/>
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid HorizontalAlignment="Stretch" >
                                    <Ellipse Stretch="Uniform" Fill="{TemplateBinding AdvBackground}" />
                                    <Path
                                     Stroke="#ffffff" StrokeThickness="1" Data="M 0,5 L -5,0 L 0,-5" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Path.RenderTransform>
                                            <TranslateTransform X="2.5" Y="2.5"/>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>

                                <Rectangle IsHitTestVisible="False" Fill="#FFFFFF" 
                                       Opacity="0"
                                       x:Name="overlay" />
                                <TextBlock Grid.Column="1" Margin="0,0,15,0"
                                               Padding="{TemplateBinding Padding}"
                                FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <TextBlock.Text>
                                        <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                            <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </TextBlock.Text>

                                </TextBlock>
                            </Grid>
                            <TextBlock 
                                    Padding="{TemplateBinding Padding}"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowBackButton, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"
                                FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                        <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </TextBlock.Text>

                            </TextBlock>
                        </Grid>


                    </Border>
                </Border>
                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsPressed" Value="False"/>
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>
                        <!--<Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />-->

                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="DarkGray" />
                        <Setter Property="BorderBrush" Value="DarkGray"/>
                    </Trigger>
                    <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </MultiTrigger>-->
                    <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </Trigger>-->
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate TargetType="{x:Type customControls:BlueButton}" x:Key="RightHanded">
                <Border 
                        Padding="{TemplateBinding Padding}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                    <Border.CornerRadius>
                        <MultiBinding Converter="{StaticResource AlignToCornerRadiusConverter}">
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerAlign" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerRadius" />
                        </MultiBinding>
                    </Border.CornerRadius>
                    <Border
                            x:Name="innerBorder"
                            Background="{TemplateBinding Background}">
                        <Border.CornerRadius>
                            <MultiBinding Converter="{StaticResource AlignToCornerRadiusConverter}">
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerAlign" />
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="InnerCornerRadius" />
                            </MultiBinding>
                        </Border.CornerRadius>
                        <Grid>
                            <Grid 
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowBackButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="{Binding ElementName=innerBorder, Path=ActualHeight}"/>
                                </Grid.ColumnDefinitions>
                                <Grid HorizontalAlignment="Stretch" Grid.Column="1">
                                    <Ellipse Stretch="Uniform" Fill="{TemplateBinding AdvBackground}" />
                                    <Path
                                     Stroke="#ffffff" StrokeThickness="1" Data="M 0,5 L -5,0 L 0,-5" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <TranslateTransform X="2.5" Y="2.5"/>
                                                <RotateTransform Angle="180"/>
                                            </TransformGroup>
                                            
                                        </Path.RenderTransform>
                                        <Path.RenderTransformOrigin>
                                            <Point X="0.5" Y="0.5" />
                                        </Path.RenderTransformOrigin>
                                    </Path>
                                </Grid>

                                <Rectangle IsHitTestVisible="False" Fill="#FFFFFF" 
                                       Opacity="0"
                                       x:Name="overlay" />
                                <TextBlock Grid.Column="0" Margin="0,0,15,0"
                                               Padding="{TemplateBinding Padding}"
                                FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <TextBlock.Text>
                                        <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                            <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </TextBlock.Text>

                                </TextBlock>
                            </Grid>
                            <TextBlock 
                                    Padding="{TemplateBinding Padding}"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowBackButton, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"
                                FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                        <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </TextBlock.Text>

                            </TextBlock>
                        </Grid>


                    </Border>
                </Border>
                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsPressed" Value="False"/>
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>
                        <!--<Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />-->

                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="DarkGray" />
                        <Setter Property="BorderBrush" Value="DarkGray"/>
                    </Trigger>
                    <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </MultiTrigger>-->
                    <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </Trigger>-->
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Tag" Value="True" />
        <Setter Property="IsLeftOriented" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsLeftOriented" Value="True">
                <Setter Property="Template" Value="{StaticResource LeftHanded}" />
            </Trigger>
            <Trigger Property="IsLeftOriented" Value="False">
                <Setter Property="Template" Value="{StaticResource RightHanded}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type customControls:RoundedButton}" x:Key="RoundedBtnStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Padding" Value="0,0" />
        <Setter Property="Tag" Value="True"></Setter>
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:RoundedButton}">
                    <Border 
                        x:Name="root"
                        CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CornerRadius}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <TextBlock
                            Padding="{TemplateBinding Padding}"
                                FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <TextBlock.Text>
                                <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                    <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </TextBlock.Text>

                        </TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4" />

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="DarkGray" />
                            <Setter Property="BorderBrush" Value="DarkGray"/>
                        </Trigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </MultiTrigger>-->
                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type customControls:RoundedButton}" x:Key="RoundedBtnWithCustomContentStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Padding" Value="0,0" />
        <Setter Property="Tag" Value="True"></Setter>
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:RoundedButton}">
                    <Border 
                        x:Name="root"
                        CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CornerRadius}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4" />

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="DarkGray" />
                            <Setter Property="BorderBrush" Value="DarkGray"/>
                        </Trigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </MultiTrigger>-->
                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type customControls:ContentButton}" x:Key="ContentBtnStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:ContentButton}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CornerRadius}"
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            BorderThickness="{TemplateBinding BorderThickness}" 
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0.3*"/>
                                <ColumnDefinition Width="0.5*"/>
                                <ColumnDefinition Width="0.2*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock 
                                TextWrapping="Wrap" Text="{TemplateBinding Title}" FontSize="{TemplateBinding TitleFontSize}" 
                               VerticalAlignment="Center" HorizontalAlignment="Center"/>

                            <Border Grid.Column="1"
                                    Background="{TemplateBinding OverlayBrush}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CornerRadius}"
                                    x:Name="middle">
                                <ContentPresenter x:Name="contentPresenter" 
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                               Margin="{TemplateBinding Padding}" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>

                            <Border Grid.Column="2" Background="{TemplateBinding IconBrush}" />

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>       
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="MainBtnStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Padding" Value="0,0" />
        <Setter Property="Tag" Value="True"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        x:Name="root"
                        CornerRadius="20"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <TextBlock
                            Padding="{TemplateBinding Padding}"
                                FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <TextBlock.Text>
                                <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                    <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </TextBlock.Text>

                        </TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4" />

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="DarkGray" />
                            <Setter Property="BorderBrush" Value="DarkGray"/>
                        </Trigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </MultiTrigger>-->
                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding ElementName=tempRect, Path=Fill}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style TargetType="{x:Type local:CustomButton}" x:Key="BaseCustomBtnStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Padding" Value="35,15" />
        <Setter Property="Tag" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomButton}">
                    <Border 
                        CornerRadius="6"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">

                        <Grid >
                            <Rectangle IsHitTestVisible="False" Fill="{TemplateBinding OverlayBrush}" 
                                        RadiusX="5"
                                       RadiusY="5"
                                       Opacity="0"
                                       x:Name="overlay" />
                            <ContentPresenter 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <ContentPresenter.ContentTemplate>
                                    <DataTemplate>
                                        <TextBox 
                                            FontSize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=FontSize, Mode=OneWay}"
                                            Padding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Padding, Mode=OneWay}" 
                                            IsHitTestVisible="False"
                                            TextWrapping="Wrap"
                                            VerticalAlignment="Center"
                                            VerticalContentAlignment="Center"
                                            Background="Transparent"
                                            Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Foreground, Mode=OneWay}" 
                                            BorderBrush="Transparent">
                                            <TextBox.Text>
                                                <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                                    <Binding Path="."/>
                                                    <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=Button}"/>
                                                </MultiBinding>
                                            </TextBox.Text>
                                            <TextBox.Style>
                                                <Style TargetType="{x:Type TextBox}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                                <Border BorderBrush="{TemplateBinding BorderBrush}"
                                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                                        Background="{TemplateBinding Background}">
                                                                    <ScrollViewer x:Name="PART_ContentHost" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"/>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>
                                    </DataTemplate>
                                </ContentPresenter.ContentTemplate>
                            </ContentPresenter>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.5" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style TargetType="{x:Type Label}" x:Key="BaseLabelStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Tag" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border 
                        CornerRadius="6"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">

                        <Grid >
                            <!--<Rectangle IsHitTestVisible="False" Fill="#FFFFFF" 
                                       Opacity="0"
                                       x:Name="overlay" />-->
                            <ContentPresenter 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <ContentPresenter.ContentTemplate>
                                    <DataTemplate>
                                        <TextBox 
                                            IsReadOnly="True"
                                            Padding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Label}, Path=Padding, Mode=OneWay}" 
                                            IsHitTestVisible="False"
                                            TextWrapping="Wrap"
                                            Background="Transparent"
                                            Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Label}, Path=Foreground, Mode=OneWay}" 
                                            BorderBrush="Transparent">
                                            <TextBox.Text>
                                                <MultiBinding Converter="{StaticResource TextToUpperConverter}">
                                                    <Binding Path="."/>
                                                    <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=Label}"/>
                                                </MultiBinding>
                                            </TextBox.Text>
                                        </TextBox>
                                    </DataTemplate>
                                </ContentPresenter.ContentTemplate>
                            </ContentPresenter>
                        </Grid>

                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type customControls:BlueButton}" 
           x:Key="DefBtnStyle"
           BasedOn="{StaticResource BaseBtnStyle}">
        <Setter Property="Background" Value="{StaticResource DefBrush}" />
        <Setter Property="AdvBackground" Value="{StaticResource DefBrushLight}" />
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="InnerCornerRadius" Value="20" />
    </Style>

    <Style TargetType="{x:Type customControls:CustomRadioButton}" x:Key="CustomRadioButtonStyle">
        <Setter Property="FontSize" Value="50" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#ffffff" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:CustomRadioButton}">
                    <Border 
                                                    x:Name="Border"
                                                    Padding="{TemplateBinding Padding}"
                                                    CornerRadius="15"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    Background="{TemplateBinding Background}"
                                                    Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
                        <ContentPresenter 
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderThickness" Value="3.5" TargetName="Border"/>
                            <Setter TargetName="Border" Property="BorderBrush" 
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>
    
    <!--<Style TargetType="{x:Type Button}" 
           x:Key="OrangeBtnStyle"
           BasedOn="{StaticResource BaseBtnStyle}">
        <Setter Property="Background" Value="{StaticResource OrangeBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource OrangeBrushPressed}"/>
        <Setter Property="BorderThickness" Value="0,0,0,3" />
    </Style>

    <Style TargetType="{x:Type Button}" 
           x:Key="BlueBtnStyle"
           BasedOn="{StaticResource BaseBtnStyle}">
        <Setter Property="Background" Value="{StaticResource BlueBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource BlueBrushPressed}"/>
        <Setter Property="BorderThickness" Value="0,0,0,3" />
    </Style>

    <Style TargetType="{x:Type Button}" 
           x:Key="RedBtnStyle"
           BasedOn="{StaticResource BaseBtnStyle}">
        <Setter Property="Background" Value="{StaticResource RedBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource RedBrushPressed}"/>
        <Setter Property="BorderThickness" Value="0,0,0,3" />
    </Style>

    <Style TargetType="{x:Type Button}" 
           x:Key="GreenBtnStyle"
           BasedOn="{StaticResource BaseBtnStyle}">
        <Setter Property="Background" Value="{StaticResource GreenBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource GreenBrushPressed}"/>
        <Setter Property="BorderThickness" Value="0,0,0,3" />
    </Style>-->

    <!--<Style TargetType="{x:Type Label}" 
           x:Key="BlueLabelStyle"
           BasedOn="{StaticResource BaseLabelStyle}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource BlueBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource BlueBrushPressed}"/>
        <Setter Property="BorderThickness" Value="0,0,0,3" />
        <Setter Property="FontSize" Value="15" />
    </Style>-->
    
    <Style TargetType="{x:Type Button}" x:Key="OpaqueButtonStyle" BasedOn="{StaticResource MainBtnStyle}">
        <Setter Property="Background" Value="#fefefe" />
        <Setter Property="Foreground" Value="#ac634c" />
    </Style>

    <Style TargetType="{x:Type customControls:RoundedButton}" x:Key="RoundedButtonDefStyle" BasedOn="{StaticResource RoundedBtnStyle}">
        <Setter Property="Background" Value="#fefefe" />
        <Setter Property="Foreground" Value="#898989" />
        <Setter Property="CornerRadius" Value="25" />
    </Style>

    <Style TargetType="{x:Type customControls:ContentButton}" x:Key="ContentButtonBaseStyle" BasedOn="{StaticResource ContentBtnStyle}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="25" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Foreground" Value="#777777" />
        <Setter Property="FontSize" Value="25" />
        <Setter Property="TitleFontSize" Value="15" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#eeeeee"/>
                    <GradientStop Offset="0.5" Color="#fefefe"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="OverlayBrush" Value="#d7d7d7" />
    </Style>

</ResourceDictionary>