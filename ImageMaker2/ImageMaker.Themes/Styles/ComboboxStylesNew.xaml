<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:customControls="clr-namespace:ImageMaker.Themes.CustomControls"
                    xmlns:converters="clr-namespace:ImageMaker.Themes.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ScrollStylesNew.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:AlignToCornerRadiusConverter x:Key="AlignToCornerRadiusConverter" />
    
    <Style x:Key="BaseComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Rectangle IsHitTestVisible="False" Fill="#FFFFFF" 
                                       Opacity="0"
                                       x:Name="overlay" />

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="BaseComboBoxControlTemplate" TargetType="{x:Type customControls:CustomComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>

            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" 
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
                   Placement="Bottom" PlacementTarget="{Binding ElementName=middle}" >
                <!--<Themes:SystemDropShadowChrome x:Name="shadow" 
                                               Color="Transparent" 
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">-->
                <Border x:Name="DropDownBorder"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                               MinWidth="{Binding ActualWidth, ElementName=middle}"
                            BorderBrush="{TemplateBinding Background}" 
                            BorderThickness="0,0,0,2" Background="{TemplateBinding OverlayBrush}">
                    <ScrollViewer x:Name="DropDownScrollViewer" 
                                  Style="{StaticResource OrangeScrollViewerStyle}">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" 
                                               Height="{Binding ActualHeight, ElementName=DropDownBorder}" 
                                               Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
                <!--</Themes:SystemDropShadowChrome>-->
            </Popup>

            <Border Grid.ColumnSpan="2"
                    Padding="{TemplateBinding Padding}"
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            BorderThickness="{TemplateBinding BorderThickness}" 
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True">
                <Border.CornerRadius>
                    <MultiBinding Converter="{StaticResource AlignToCornerRadiusConverter}">
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerAlign" />
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerRadius" />
                    </MultiBinding>
                </Border.CornerRadius>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.3*"/>
                        <ColumnDefinition Width="0.5*"/>
                        <ColumnDefinition Width="0.2*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock TextWrapping="Wrap" Text="{TemplateBinding Title}" FontSize="{TemplateBinding TitleFontSize}" 
                               VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    
                    <Border Grid.Column="1" Background="{TemplateBinding OverlayBrush}" x:Name="middle">
                        <Border.CornerRadius>
                            <MultiBinding Converter="{StaticResource AlignToCornerRadiusConverter}">
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerAlign" />
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerRadius" />
                            </MultiBinding>
                        </Border.CornerRadius>
                        <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ItemTemplate}" 
                              Content="{TemplateBinding Text}" 
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              IsHitTestVisible="False" Margin="{TemplateBinding Padding}" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    
                    <ToggleButton x:Name="toggleButton" Grid.Column="2"
                          BorderBrush="{TemplateBinding BorderBrush}" 
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}" 
                          Content="{TemplateBinding Title}"
                          HorizontalAlignment="Center"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="IsTabStop" Value="False"/>
                                <Setter Property="Focusable" Value="False"/>
                                <Setter Property="ClickMode" Value="Press"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border x:Name="templateRoot" >
                                                <Grid>
                                                    <Rectangle IsHitTestVisible="True" Fill="#FFFFFFFF" 
                                       Opacity="0"
                                       x:Name="overlay" />

                                                    <Border x:Name="splitBorder" 
                                                 
                                                    BorderBrush="Transparent"
                                                BorderThickness="1" 
                                                HorizontalAlignment="Right" Margin="0" 
                                                SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                        <Path x:Name="Arrow" 
                                                  Data="M 0,0 L 12,12 L 0,24"
                                                  Stroke="{Binding RelativeSource={RelativeSource AncestorType=customControls:CustomComboBox}, Path=OverlayBrush}"
                                                  StrokeThickness="4"
                                                  HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center">
                                                            <Path.RenderTransform>
                                                                <TransformGroup>
                                                                    <RotateTransform CenterX="6" CenterY="12" Angle="90" />
                                                                    <TranslateTransform X="0" />
                                                                </TransformGroup>

                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                </Grid>

                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <!--<Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />-->
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <!--<Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />-->
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <!--<Setter TargetName="overlay" Property="UIElement.Opacity" Value="0.2" />-->
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource OrangeBrushPressed}"/>-->
                                                    <Setter Property="RenderTransform" TargetName="Arrow">
                                                        <Setter.Value>
                                                            <TransformGroup>
                                                                <RotateTransform CenterX="6" CenterY="12" Angle="-90" />
                                                                <!--<TranslateTransform X="-2.5" />-->
                                                            </TransformGroup>
                                                        </Setter.Value>
                                                    </Setter>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource OrangeBrushPressed}"/>-->
                                                    <Setter Property="RenderTransform" TargetName="Arrow">
                                                        <Setter.Value>
                                                            <TransformGroup>
                                                                <RotateTransform CenterX="6" CenterY="12" Angle="-90" />
                                                                <!--<TranslateTransform X="-2.5" />-->
                                                            </TransformGroup>
                                                        </Setter.Value>
                                                    </Setter>
                                                </MultiDataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    
                </Grid>
                </Border>
                
            
            
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="toggleButton" Property="IsChecked" Value="True">
                <Setter TargetName="middle" Property="CornerRadius">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource AlignToCornerRadiusConverter}">
                            <Binding>
                                <Binding.Source>
                                    <customControls:Align>
                                        TopLeft,TopRight
                                    </customControls:Align>
                                </Binding.Source>
                            </Binding>
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerRadius" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <!--<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>-->
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type customControls:CustomComboBox}" x:Key="BaseComboBoxStyle">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="CornerAlign" Value="BottomLeft,TopLeft,TopRight,BottomRight" />
        <Setter Property="MaxDropDownHeight" Value="175" />
        <Setter Property="CornerRadius" Value="25" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Foreground" Value="#777777" />
        <Setter Property="FontSize" Value="25" />
        <Setter Property="TitleFontSize" Value="15" />
        <Setter Property="IsEditable" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource BaseComboBoxItemStyle}" />
        <Setter Property="Template" Value="{StaticResource BaseComboBoxControlTemplate}" />
    </Style>

    <Style TargetType="{x:Type customControls:CustomComboBox}" BasedOn="{StaticResource BaseComboBoxStyle}" x:Key="DefComboBoxStyle">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#eeeeee"/>
                    <GradientStop Offset="0.5" Color="#fefefe"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="OverlayBrush" Value="#d7d7d7" />
    </Style>
</ResourceDictionary>