using System;
using System.Data.Entity.Migrations;
using System.Linq;
using ImageMaker.Common.Helpers;
using ImageMaker.DataContext.Contexts;
using ImageMaker.Entities;

namespace ImageMaker.DataContext.Migrations
{
    internal sealed class ImageContextConfiguration : DbMigrationsConfiguration<ImageContext>
    {
        public ImageContextConfiguration()
        {
            AutomaticMigrationsEnabled = true;
        }

        protected override void Seed(ImageContext context)
        {
            var users = context.Set<User>();
            if (users.All(p => p.CameraSettings != null && p.AppSettings != null) &&
                users.FirstOrDefault(x => x.Name == "admin") != null)
                return;

            var defaultCameraSets =
                StringToByteArray(

            var defaultAppSets =
                StringToByteArray(


            foreach (var item in users)
            {
                if (item.CameraSettings == null)
                    item.CameraSettings = defaultCameraSets;
                if (item.AppSettings == null)
                    item.AppSettings = defaultAppSets;
            }

            if (users.FirstOrDefault(x => x.Name == "admin") != null)
                return;

            var hashBuilder = new HashBuilder();
            var defaultPassword = hashBuilder.HashPassword("123456");
            users.AddOrUpdate(x => x.Name,
                new User
                {
                    Name = "admin",
                    Password = defaultPassword,
                    CameraSettings = defaultCameraSets,
                    AppSettings = defaultAppSets
                });
            //todo
            //context.Set<Pattern>().AddOrUpdate(x => x.PatternType, Enum.GetValues(typeof (PatternType))
            //    .OfType<PatternType>()
            //    .Select(x => new Pattern(x.GetDescription(), x)).ToArray());
        }

        private static byte[] StringToByteArray(string hex)
        {
            return Enumerable.Range(0, hex.Length/2)
                .Select(x => Convert.ToByte(hex.Substring(x*2, 2), 16))
                .ToArray();
        }
    }
}
